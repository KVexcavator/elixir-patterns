Диапазоны
> range = 1..2
> 2 in range #-> true
> -1 in range #-> false
Enum.each(
    1..3,
    &IO.puts/1
)
==================================================
Ключевые списки
Ключевой список – это особый список, каждым элементом которого является кортеж из двух элементов, где первый из них – это атом, а второй может быть представлен любым типом данных.
days = [{:monday, 1}, {:tuesday, 2}, {:wednesday, 3}]
простой синтаксис
days = [monday: 1, tuesday: 2, wednesday: 3]
> Keyword.get(days, :monday)
> days[:tuesday]
Ключевые списки чаще всего используются для предоставления клиентам возможности передавать произвольное количество дополнительных аргументов.
Поведение по умолчанию
IO.inspect([100, 200, 300])
Передача дополнительных опций
IO.inspect([100, 200, 300], width: 3, limit: 1)
Ключевой список можно передать функции в качестве последнего аргумента и сделать его по умолчанию пустым:
def my_fun(arg1, arg2, opts \\ []) do
...
end
=================================================
MapSet
реализация набора уникальных значений, которые могут быть представлены любыми типами.
days = MapSet.new([:monday, :tuesday, :wednesday])
MapSet.member?(days, :monday) #-> true
Добавление нового элемента в MapSet
days = MapSet.put(days, :thursday)
Enum.each(days, &IO.puts/1)
==================================================
Дата и время
Date, Time, DateTime и NaiveDateTime
-------------------------------------------------
date = ~D[2018-01-31]
date.year
--------------------------------------------------
time = ~T[11:59:12.00007]
time.minute
--------------------------------------------------
naive_datetime = ~N[2018-01-31 11:59:12.000007]
naive_datetime.year
-------------------------------------------------
datetime = DateTime.from_naive!(naive_datetime, "Etc/UTC")
datetime.time_zone
=================================================
Списки ввода-вывода
для постепенного формирования результата, который затем передается в устройство ввода-вывода – сеть или файл.
Элементами списка ввода-вывода могут быть:
- целое число от 0 до 255;
- бинарные данные;
- другой список ввода-вывода.
iolist = [[['H', 'e'], "llo,"], " worl", "d!"]
> IO.puts(iolist) #-> Hello, world!

пригодятся для формирования потока байтов
Инициализация списка ввода-вывода
iolist = []
Добавление элементов в конец списка
iolist = [iolist, "This"]
iolist = [iolist, " is"]
===================================================
Макрос
представляет собой код Elixir, способный изменить семантику переда-
ваемого ему кода. Макрос всегда вызывается на этапе компиляции, получая на
входе проанализированный код Elixir и возвращая альтернативную его версию
на выходе.
на примере. unless (аналог if not)
unless some_expression do
    block_1
else
    block_2
end
unless – это не ключевое слово, а макрос, преобразующая следующий после него код в нечто подобное:
if some_expression do
    block_2
else
    block_1
end
